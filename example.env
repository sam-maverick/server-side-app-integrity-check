# 1. Read the comments. They are important. Also check the official documentation of the APIs
# 2. Configure the parameters accordinly with your environment
# 3. Rename the file to ".env"
# 4. Put the file at the root of your project
# 5. Now you can use the server-side-app-integrity-check library in your project


# Android app package name
PACKAGE_NAME=com.domain.something

# JSON contents of the service account from Google Cloud Project. Should be the samed linked to the Play Console 
# where the Android app is maintained. See "Set up a google cloud project" in the README file.
GOOGLE_APPLICATION_CREDENTIALS={"type": "service_account",  "project_id": "something-something-123456",  "private_key_id": "5a2356a9e8962389497ac9d9a9395",  "private_key": "-----BEGIN PRIVATE KEY-----\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\nfmk43Gwe4Yhweege45e4344gtewwgt/rrry+r5yue56456hyureh6\n-----END PRIVATE KEY-----\n",  "client_email": "serviceaccount@something-something-123456.iam.gserviceaccount.com",  "client_id": "67567676778",  "auth_uri": "https://accounts.google.com/o/oauth2/auth",  "token_uri": "https://oauth2.googleapis.com/token",  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/serviceaccount%40something-something-123456.iam.gserviceaccount.com",  "universe_domain": "googleapis.com"}

# playIntegrity decryption key which can be obtained from the Google Play Console
BASE64_OF_ENCODED_DECRYPTION_KEY=fegbjweGBre/55Sgbs+dHDTHJDRTHJH=

# playIntegrity verification key which can be obtained from the Google Play Console
BASE64_OF_ENCODED_VERIFICATION_KEY=fggj/jdtj/detwerhewqEREGWGSAGERHJT/dhrthreth+nwethwetwhRETRHRETH==

# Console logging. 0=disabled, 1=normal logging, 2=verbose debugging
# NOTE: Setting this to anything other than 0 may significantly impact performance
# IMPORTANT NOTE: Setting this parameter to 2 will log secret information to the console !!!
# Change accordingly to your preference
LOGGING_LEVEL=2

# This is a list of fingerprints containing the fingerprint of the certificate used to sign the app, as shown in:
# https://play.google.com/console
# We use this to check the app's digital signature
# > Setup > App signing > App signing key certificate > SHA-256 certificate fingerprint
# Format is HEX, semicolon-separated, in uppercase
VALID_CERTIFICATE_SHA256DIGEST=["01:02:03:04:01:02:03:04:01:02:03:04:01:02:03:04:01:02:03:04"]

# Maximum delay, in ms, between the attestation object generation in Google servers, and its reception on the ppserver.
# It applies to Android classic requests, and to iOS requests.
# --
# https://developer.android.com/google/play/integrity/classic#compare-standard
# Most requests are under 10s but they involve a server call, so a long timeout is recommended (e.g. 1 minute)
# --
# This is to ensure freshness of the attestation.
# Note that this does not cover the delay between the nonce generation on the ppserver, and the attestation token 
# request submission by the app to the Google servers.
MAX_PARTIAL_DELAY_MS_CLASSIC_OR_IOS=60000

# Maximum delay, in ms, between the attestation object generation, and its reception on the ppserver.
# It applies to Android standard requests only.
# --
# IMPORTANT NOTE: In Android, the timestampMillis of classic requests correspond to when the warmup function is called. Due to the 
# cached nature of Android's standard requests, make sure that the estimated time between the warmup call and the standard token request
# does not exceed MAX_PARTIAL_DELAY_MS_STANDARD, otherwise you will get a failure with a 'Request too old' message.
# Also bear in mind that both warmup operations and standard requests are throttled by Google.
# Check https://developer.android.com/google/play/integrity/classic for more info
# --
# https://developer.android.com/google/play/integrity/classic#compare-standard
# Most warm ups are under 10s but they involve a server call, so a long timeout is recommended (e.g. 1 minute). 
# Verdict requests happen client-side
# --
# This is to ensure freshness of the attestation.
# Note that this does not cover the delay between the nonce generation on the ppserver, and the attestation token 
# request submission by the app to the Google servers.
MAX_PARTIAL_DELAY_MS_STANDARD=60000

# Minimum version of your app release, in decimal format (non-negative integer), as shown in:
# https://play.google.com/console
# Releases overview > Latest releases > Release version
APP_MIN_VERSION=8

# Maximum allowed device activity level, in Android requests. The lowest the value, the more secure.
# See https://developer.android.com/google/play/integrity/setup#optional_device_information
# Set this parameter to one of the following numeric values: 1, 2, 3, or 4
# The numeric values correspond, respectively, to: "LEVEL_1", "LEVEL_2", "LEVEL_3", or "LEVEL_4"
MAX_ALLOWED_STANDARD_ACTIVITY_LEVEL=1

# In iOS, we already check that the asserted signCount value is greater than or equal to the last seen one.
# The last seen value is stored in the app server database. This is because it does not make sense that it is lower.
# Besides, we check that signCount does not exceed the last seen value by the number indicated in this parameter.
# Continued temporary network issues may cause this gap to increment, when an assertion is requested but not used. However,
# we expect this gap to stay relatively low.
# Note that every time an assertion is accepted, signCount is updated, so that the current gap is set to 0. Therefore,
# intermittent network issues do not make the gap build up.
# This corresponds to the "counter", in the following documentation:
# https://developer.apple.com/documentation/devicecheck/validating-apps-that-connect-to-your-server
MAX_ALLOWED_IOS_SIGNCOUNT_GAP=50

# In iOS, attestions come with a receipt ID. This receipt ID can be sent by the app server to Apple servers to get a 
# fraud risk metric that indicates how many times our app has done an attestation on the device. 
# Note that every time the user reinstalls the app, restores from a backup, or transfers to a new device, 
# this metric is incremented.
# See:
# https://developer.apple.com/documentation/devicecheck/assessing-fraud-risk
#
# TBC --- Not yet implemented!
#
MAX_ALLOWED_IOS_ATTESTATIONS_FRM=20